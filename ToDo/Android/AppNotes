
I went through the steps on this site as best I could.  The problem was that this tutorial is for Eclipse.  
https://developer.android.com/training/basics/firstapp/index.html


Open Android Studio

Select "New Project..."

I was prompted to make a phone/tablet app that targeted 4.0.3
I could have chosen any of the 4.x versions or back to 3.x, but there wasn't an option to target 2.x

There was also an option for targeting a wearables and tv, but I didn't explore those.

I selected a Tabbed Activity to start.

It took a while to setup the project because several dependencies were downloaded.  I'm not sure what all of these are.  These were installed automatically using the "gradle" build/packaging system.


I tried to run the app right away but got an error.
I had previously installed Xamarin and Android Developer found several Android Virtual Device's called "MonoForAndroid".  These were the only options.

I had to create a new AVD...
I was unable to create a new AVD before I installed CPU/AB Image...back to the Android SDK Manager.
I installed the 4.4.2 Intel x86 Atom System Image
I created a Nexus 5 image...but I had to take random guesses to spec it out.


HAX - Intel Hardware Accelerated Execution Manager
https://software.intel.com/en-us/android/articles/intel-hardware-accelerated-execution-manager
In order to make the emulator run faster, I installed HAX.
There was an error in the installation process that said the Kernel Extension was not from a registered developer...but I plowed ahead and Android Studio told me HAX was working.

So I ran the app...and got a blank screen. Wasn't sure what I should get though, so maybe that was progress.
...after changing my AVD's skin, I saw the world "Android" on the screen as if the device was booting.  And the app log in android studio starting spitting out "Device Nexus_5 [emulator-5554] is online, waiting for processes to start up.." messages
...but nothing happened. :(

I finally discovered that I had to give some space to the SD Card in the AVD I created.



Back go the app...
Following the tutorial, I found the fragment_to_dos.xml file that contains the layout for the main fragement of the app.  I replaced it's contensts with a linear layout and then begain adding other elements to that linear layout

After making some changes I got a rendering error within Android Studio.  I fixed it by changing android version in the rendering window from 4.4W (api 20) to 4.4.2 (api 19)

The tutorials on https://developer.android.com/training/ seem pretty good.


For the Todo app, I chose a blank activity and found some ListView examples online.  No one of the exampels I found was complete.  I had to use several of them.


In general I like the xml markup for defining the UI.  There's a learning curve but it seems relatively sane and unsurprising.
The tooling in Android Studio is also good for discovering and setting properties on UI elements. It's also somewhat useful for getting an idea of what things will look like.
The XML editor also has good intellisense.
I took the approach of writing the XML by hand and only switching to the GUI for discovering the properties of each UI element. 


Creating a new activity should start with created the activity java class. Android Studio will create the layout xml file

Units of measure 
Android recommends using "dp" which is a density independent pixel.  See this post http://blog.edwinevans.me/?p=131


After leaving the android emulator open for a while it started to slow down. Restarting helped.

In order to get the EditText cursor to be white, I had to set the textCursorDrawable to @null...not obvious at all.
Even then it was hard to see

The debugger is decent, but a little slow.
The controls are not obvious...for instance when at a breakpoint the "run" button will try to start up another instance of the application instead of resuming the current one.



Adding a library
For persisting data, I chose to use the google gson library.  That's when I started diving into the gradle build system.
(This is a huge topic and I only explored enough to actually solve my problem.)

My goal was to pull the gson dependency down from a central repository.  I discovered that the Maven Central repository is the "main" repo for java libraries and found gson on it.

https://search.maven.org/
gson is here: https://search.maven.org/#artifactdetails%7Ccom.google.code.gson%7Cgson%7C2.3%7Cjar

I could not find a UI for managing dependencies.  It seems I must edit the build.gradle files for my project to add them.
This document was kinda helpful, but seemed to be outdated as the structure of the build.gradle files don't exactly match what was in my project.  It did lead me to http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.dsl.DependencyHandler.html though

I added the this to the allprojects -> repositories section of the build.gradle file in the root of the application.
  mavenCentral() 
And then added this to the dependencies in the build.gradle file under the src directory
  compile 'com.google.code.gson:gson:2.3'

Then a "Build -> Make Project" downloaded the dependency and placed it under my External Libraries.


